---
description: 'Shared packages development rules'
globs: ['packages/**/*']
alwaysApply: true
---

# Shared Packages

This directory contains shared packages used across the monorepo.

## Package Structure

### Core UI (`packages/core-ui`)
- **Purpose**: Design system and reusable UI components
- **Framework**: React 19.1.1
- **Language**: TypeScript 5.9.2 (strict mode)
- **Styling**: TailwindCSS v4, Radix UI primitives
- **Type**: Design system
- **Dependencies**: None (base design system)
- **Key Libraries**: 
  - Radix UI components (dialog, dropdown, select, etc.)
  - TailwindCSS v4 with PostCSS
  - class-variance-authority, clsx, tailwind-merge
  - react-hook-form, zod validation
  - lucide-react icons, next-themes

### Form UI Library (`packages/form-ui`)
- **Purpose**: Form-specific UI components and logic
- **Framework**: React 19.1.1
- **Language**: TypeScript 5.9.2 (strict mode)
- **Styling**: TailwindCSS v4
- **Type**: Library
- **Dependencies**: `@repo/core-ui`
- **Key Libraries**:
  - lucide-react icons
  - zod validation
  - Testing: Vitest, @testing-library/react

### ESLint Config (`packages/eslint-config`)
- **Purpose**: Shared ESLint configurations
- **Type**: Configuration package
- **Dependencies**: None

### TypeScript Config (`packages/typescript-config`)
- **Purpose**: Shared TypeScript configurations
- **Type**: Configuration package
- **Dependencies**: None

### Prettier Config (`packages/prettier-config`)
- **Purpose**: Shared Prettier configuration
- **Type**: Configuration package
- **Dependencies**: None

### API Spec (`packages/api-spec`)
- **Purpose**: TypeSpec API specification and OpenAPI documentation
- **Language**: TypeSpec (Microsoft's TypeSpec)
- **Type**: API specification
- **Dependencies**: None
- **Key Libraries**:
  - @typespec/compiler, @typespec/http
  - @typespec/openapi3, @typespec/rest
  - @typespec/versioning
  - Output: OpenAPI 3.0 specification

## Development Guidelines

### Package Development
- Use TypeScript strict mode
- Export components and utilities through `src/index.ts`
- Follow semantic versioning
- Use proper package.json configurations
- Include proper TypeScript declarations

### Component Development
- Use functional components with hooks
- Implement proper TypeScript interfaces
- Follow accessibility best practices
- Use consistent naming conventions
- Document component props and usage

### Build Configuration
- Use appropriate build tools (Vite for React libraries)
- Generate proper type declarations
- Optimize bundle size
- Follow the monorepo's shared configurations

## Import Patterns
- Use `@repo/package-name` for internal package imports
- Avoid circular dependencies
- Maintain clear dependency hierarchy: core-ui → form-ui → applications